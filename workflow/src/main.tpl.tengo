// "hello world"
wf := import("@platforma-sdk/workflow-tengo:workflow")
exec := import("@platforma-sdk/workflow-tengo:exec")
assets:= import("@platforma-sdk/workflow-tengo:assets")
render := import("@platforma-sdk/workflow-tengo:render")
maps := import("@platforma-sdk/workflow-tengo:maps")
smart := import("@platforma-sdk/workflow-tengo:smart")
pframes := import("@platforma-sdk/workflow-tengo:pframes")
ll := import("@platforma-sdk/workflow-tengo:ll")

processTpl := assets.importTemplate(":process")


wf.body(func(args) {
	input := wf.resolve(args.input)

	receptorsOrChains := ["IG", "TCRAB", "TCRGD"]
	if !is_undefined(args.chains) {
		receptorsOrChains = args.chains
	}

	runMixcr := render.createEphemeral(processTpl, {
		inputSpec: input.getFutureInputField("spec"),
		inputData: input.getFutureInputField("data"),
		preset: args.preset,
		blockId: wf.blockId().getDataAsJson(),
		limitInput: args.limitInput,
		receptorsOrChains: receptorsOrChains
	})

	exports := {
		clones: runMixcr.output("clonotypes"),
		clns: {
			spec: runMixcr.output("clns.spec"),
			data: runMixcr.output("clns.data")
		}
	}

	return {
		outputs: {
			logs: runMixcr.output("logs.data"),
			qc: pframes.exportColumnData(runMixcr.output("qc.data")),
			reports: pframes.exportColumnData(runMixcr.output("reports.data")),
			clones: pframes.exportFrame(runMixcr.output("clonotypes")), //@TODO: remove from outputs
			clns: runMixcr.output("clns.data") //@TODO: remove from outputs
		},
		exports: exports
	}
})
